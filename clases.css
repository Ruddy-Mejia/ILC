.contenedor{    
    width: 80%; 
    /*para alinear texto*/
    text-align: center;
    /*alinear elementos de tipo bloque*/
    margin: auto;     
}

.centrar_elementos{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;        
}



.myelement{
    color: white;
}
.myelement1{
    color: white;
    width: 50%;
}





























.contenedor-flex{
    width: 500px;
    height: 200px;
    background: #fff;
    padding: 10px;
    border: 10px solid #2c3e50;
    margin: 20px;

    display: flex;
    display: -webkit-flex;
    display: -ms-flexbox;
    flex-direction: row;
    /*wrap: sirve si es que todos los elementos (en px)
    sumados dan un numero mayor que el contenedor,
    acomodandolos debajo*/
    /*nowrap: sin importar la suma de px de todos los 
    elementos, esta propiedad nos acomoda todos los 
    elementos en una misma fila dividiendolos en partes 
    iguales y que sumadas den el tamanio en px del contenedor*/
    /*wrap-reverse: cambia el orden y les da la vuelta*/
    flex-wrap: nowrap;
    /*atajo: recibe las propiedades de flex-direction y flex-wrap*/
    /*flex-flow: row wrap;*/
    /*flex-end: los elementos se posicionan al final sin alterar su orden
    pd: no nos sirve si existe un elemento al inicio de la misma fila*/
    /*center: centra todo*/  
    /*space-around: propiedad que hace que los elementos quepan en el 
    contenedor dejando espacios entre los elementos para que todo quede 
    parejo, respeta el ancho de los elementos*/
    /*space-between: similar al anterior, solo que en este no tenemos 
    margenes al inicio ni al final, en este si se puede realizar lo que 
    no se podia con la propiedad flex-end*/
    justify-content: center;
    /*diferencia entre justifi-content y align-items: JC horizontal y AI vertical*/
    /*center: centra en vertical*/
    /*flex-end: al final en vertical*/
    /*strerch: los elementos abarcan el 100% del contenedor de manera vertical 
    pd: la propiedad height del elemento debe estar por defecto*/
    /*baseline: iguala el contenido textual de todos los elementos en una sola linea*/
    align-items: center;

    /*si queremos alinear grupos de elementos debemos utilizar la propiedad align-content*/
    /*a diferencia de align-items:center esta propiedad no nos deja un espacio en medio de las filas de elementos*/
    /*para una sola fila de elementos en el contenedor la prop que funciona el align-items y no align-content*/    
    /*bajo el mismo principio de no dejar espacio entre filas el flex-start y el flex-end funcionan igual que 
    en las demas propiedades de contenedor*/
    /*space-between: nos deja un espacio en medio de los elementos con la finalidad de que estos quepan 
    en el contenedor dejando un espacio en el centro*/
    /*space-around: esta propiedad funciona similar a la anterior, solo que deja un espacio al inicio,
    final y al centro de los elementos con tal de que quepan en el contenedor, solo funciona para varias 
    lineas, o utilizando wrap*/
    /*align-content: center;*/    
    /*nota: todas estas propiedades funcionan tambien en columnas*/
}

.elemento{
    /*el valor en flex-grow con el que le indicamos el crecimiento que va a tener el elemento 
    en comparacion de los demas elementos hermanos, si le ponemos 2 al un elemento hermano 
    (elemento2) crece el doble en px*/
    flex-grow: 1;
    color: #fff;
    margin: 5px;
    /*width y flex-basis son casi lo mismo*/
    /*flex-basis es dinamico: puede significar el alto o el ancho dependiendo de como 
    estemos usando la direccion del contenedor (row o column)*/
    width: 50px;
    height: 50px;
    background: navy;
    text-align: center; 
    /*display: inline-block*/

}
/*
.elemento2{
    flex-grow: 2;
}*/
